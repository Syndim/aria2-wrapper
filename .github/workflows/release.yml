name: Build and Release
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_names: aria2-wrapper curl-wrapper
            asset_name: downloader-wrapper-linux-amd64.zip
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_names: aria2-wrapper.exe curl-wrapper.exe
            asset_name: downloader-wrapper-windows-amd64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_names: aria2-wrapper curl-wrapper
            asset_name: downloader-wrapper-macos-amd64.zip
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_names: aria2-wrapper curl-wrapper
            asset_name: downloader-wrapper-macos-arm64.zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      # Create distribution directory with binary and supplementary files
      - name: Create distribution directory
        run: |
          mkdir -p dist
          cp README.md dist/
          cp LICENSE dist/ || echo "No LICENSE file found"
          cp config.toml dist/config.example.toml
      # Copy binaries to distribution directory based on platform
      - name: Copy binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          for bin in ${{ matrix.bin_names }}; do
            cp target/${{ matrix.target }}/release/$bin dist/
          done
      - name: Copy binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          foreach ($bin in "${{ matrix.bin_names }}".Split(" ")) {
            Copy-Item -Path "target\${{ matrix.target }}\release\$bin" -Destination "dist\"
          }
        shell: pwsh
      # Create ZIP archive
      - name: Create ZIP (Unix)
        if: matrix.os != 'windows-latest'
        run: cd dist && zip -r ../${{ matrix.asset_name }} .
      - name: Create ZIP (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path dist\* -DestinationPath ${{ matrix.asset_name }}
        shell: pwsh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: find artifacts -type f | sort
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/downloader-wrapper-linux-amd64.zip/downloader-wrapper-linux-amd64.zip
            artifacts/downloader-wrapper-windows-amd64.zip/downloader-wrapper-windows-amd64.zip
            artifacts/downloader-wrapper-macos-amd64.zip/downloader-wrapper-macos-amd64.zip
            artifacts/downloader-wrapper-macos-arm64.zip/downloader-wrapper-macos-arm64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
